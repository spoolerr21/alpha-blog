RSpec.describe ArticlesController, type: :controller do
  describe "GET #index" do
    it "assigns all articles to @articles" do
      article1 = create(:article)
      article2 = create(:article)
      get :index
      expect(assigns(:articles)).to eq([article1, article2])
    end

    it "renders the index template" do
      get :index
      expect(response).to render_template(:index)
    end
  end

  describe "GET #show" do
    it "assigns the requested article to @article" do
      article = create(:article)
      get :show, params: { id: article.id }
      expect(assigns(:article)).to eq(article)
    end

    it "renders the show template" do
      article = create(:article)
      get :show, params: { id: article.id }
      expect(response).to render_template(:show)
    end
  end

  describe "GET #new" do
    it "assigns a new article to @article" do
      get :new
      expect(assigns(:article)).to be_a_new(Article)
    end

    it "renders the new template" do
      get :new
      expect(response).to render_template(:new)
    end
  end

  describe "POST #create" do
    context "with valid attributes" do
      it "creates a new article" do
        expect {
          post :create, params: { article: attributes_for(:article) }
        }.to change(Article, :count).by(1)
      end

      it "redirects to the created article" do
        post :create, params: { article: attributes_for(:article) }
        expect(response).to redirect_to(Article.last)
      end
    end

    context "with invalid attributes" do
      it "does not create a new article" do
        expect {
          post :create, params: { article: attributes_for(:article, title: nil) }
        }.to_not change(Article, :count)
      end

      it "renders the new template with unprocessable entity status" do
        post :create, params: { article: attributes_for(:article, title: nil) }
        expect(response).to render_template(:new)
        expect(response.status).to eq(422)
      end
    end
  end

  describe "GET #edit" do
    it "assigns the requested article to @article" do
      article = create(:article)
      get :edit, params: { id: article.id }
      expect(assigns(:article)).to eq(article)
    end

    it "renders the edit template" do
      article = create(:article)
      get :edit, params: { id: article.id }
      expect(response).to render_template(:edit)
    end
  end

  describe "PUT #update" do
    let(:article) { create(:article) }

    context "with valid attributes" do
      it "updates the article" do
        put :update, params: { id: article.id, article: { title: "New Title" } }
        article.reload
        expect(article.title).to eq("New Title")
      end

      it "redirects to the updated article" do
        put :update, params: { id: article.id, article: { title: "New Title" } }
        expect(response).to redirect_to(article)
      end
